import json
import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
def load_data(filename):
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    else:
        return {"users": {}, "teams": {}}  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–º–∞–Ω–¥

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
def save_data(filename, data):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def update_user_data(user_id, username, team, wishes, receiver,filename='bazadannih.json'):
    data = load_data(filename)
    if str(user_id) not in data['users']:
        data['users'][str(user_id)] = {
            'username': username,
            'team': team,
            'wishes': wishes,
            'receiver': receiver
        }
    save_data(filename, data)


# –ù–∞—á–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    context.user_data['username'] = username

    update_user_data(user_id, username, team='–ù–µ —É–∫–∞–∑–∞–Ω–∞', wishes='–ù–µ —É–∫–∞–∑–∞–Ω—ã', receiver='–Ω–µ —É–∫–∞–∑–∞–Ω—ã')

    update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –î–æ—Ä–æ–≥–æ–π –°–∞–Ω—Ç–∞, {username}! üéÖ\n"
                              "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ - –í–µ–ª—å—Ñ. –ú–æ—è –∑–∞–¥–∞—á–∞ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –°–∞–Ω—Ç—É, –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã –±—É–¥–µ—à—å –¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫.")

    # –ö–Ω–æ–ø–æ—á–∫–∏
    keyboard = [
        [InlineKeyboardButton("–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞", callback_data='join_team')],
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É", callback_data='create_team')],
        [InlineKeyboardButton("–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data='how_it_works')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é?", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
def team_selection(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()

    if query.data == "join_team":
        query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.")
        context.user_data['action'] = 'join_team'
    elif query.data == "create_team":
        query.message.reply_text("–ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã.")
        context.user_data['action'] = 'create_team'
    elif query.data == "how_it_works":
        query.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–µ –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞. "
                                  "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π. "
                                  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–∏—à–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ —Ü–µ–Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å—Ç–∏—Ç —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é –ø–æ–¥–∞—Ä–∫–æ–≤!")

# –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ
# –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ
def join_team(update: Update, context: CallbackContext, team_name: str) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    team_name = update.message.text.strip()

    data = load_data('bazadannih.json')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ
    if str(user_id) in data['users'] and data['users'][str(user_id)]['team'] != '–ù–µ —É–∫–∞–∑–∞–Ω–∞':
        update.message.reply_text("–¢—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–æ–º–∞–Ω–¥–µ –∏ –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–æ–π.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞
    if team_name in data['teams']:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É
        context.user_data['team'] = team_name
        data['teams'][team_name]['members'].append(user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_user_data(user_id, username, team=team_name, wishes='–ù–µ —É–∫–∞–∑–∞–Ω—ã', receiver='–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω', filename='bazadannih.json')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        save_data('bazadannih.json', data)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π
        context.user_data['action'] = 'write_wishes'
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏—è
        update.message.reply_text("–¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π
        context.user_data['action'] = 'write_wishes'
    else:
        update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")



# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
def create_team(update: Update, context: CallbackContext, team_name: str) -> None:                 
    user_id = update.message.from_user.id
    team_name = update.message.text.strip()
    data = load_data('bazadannih.json')

    if team_name in data['teams']:
        update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
    data['teams'][team_name] = {
        'categories': [],
        'members': [user_id],
        'creator': user_id
    }
    save_data('bazadannih.json', data)
    
    update_user_data(user_id, context.user_data['username'], team=team_name, wishes='–ù–µ —É–∫–∞–∑–∞–Ω—ã', receiver='–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')        
    
    update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞.")
    context.user_data['team'] = team_name
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π
    context.user_data['action'] = 'write_wishes'

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏—è
    update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.")

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#def price_buttons():
 #   keyboard = [
  #      [InlineKeyboardButton("–î–æ 500 —Ä—É–±.", callback_data='price_500')],
   #     [InlineKeyboardButton("500 - 1000 —Ä—É–±.", callback_data='price_500_1000')],
    #    [InlineKeyboardButton("–ë–æ–ª—å—à–µ 1000 —Ä—É–±.", callback_data='price_1000')]
   # ]
    #return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#def price_selection(update: Update, context: CallbackContext) -> None:
 #   query = update.callback_query
  #  query.answer()
  #
    #user_id = query.from_user.id
   # category = query.data
   # team = context.user_data.get('team')
#
 #  data = load_data('bazadannih.json')
 #
   # if team and data['teams'][team]['creator'] == user_id:
    #    data['teams'][team]['categories'].append(category)
     #   save_data('bazadannih.json', data)
      #  query.message.reply_text(f"–¶–µ–Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    #else:
     #   query.message.reply_text("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def write_wishes(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    user_action = context.user_data.get('action')  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if user_action == 'create_team':  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—ë—Ç –∫–æ–º–∞–Ω–¥—É
        team_name = update.message.text.strip()
        create_team(update, context, team_name)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    elif user_action == 'join_team':  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ
        team_name = update.message.text.strip()
        join_team(update, context, team_name)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ
    elif user_action == 'write_wishes':  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –ø–æ–∂–µ–ª–∞–Ω–∏—è
        wishes = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–æ–∂–µ–ª–∞–Ω–∏–π
        if len(wishes) < 10:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è.")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = load_data('bazadannih.json')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ
        if str(user_id) not in data['users'] or data['users'][str(user_id)]['team'] == '–ù–µ —É–∫–∞–∑–∞–Ω–∞':
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –µ—ë, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–∏—Å–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏—è –≤ –ë–î
        data['users'][str(user_id)]['wishes'] = wishes

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        save_data('bazadannih.json', data)

        update.message.reply_text("–¢–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –ø–æ–¥–æ–∂–¥–∏, –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å—Ç–∏—Ç —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é.")
        
        show_action_buttons(update, context)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π

    # –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    context.user_data['action'] = None





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
def show_action_buttons(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    team = context.user_data.get('team')
    data = load_data('bazadannih.json')

    if team and data['teams'][team]['creator'] == user_id:
        keyboard = [
            [InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤", callback_data='distribute')],
            [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ", callback_data='write_wish')]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ", callback_data='write_wish')]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(chat_id=update.message.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤
def distribute(update: Update, context: CallbackContext) -> None:
    user_id = update.callback_query.from_user.id
    team_name = context.user_data.get('team')
    data = load_data('bazadannih.json')

    if team_name not in data['teams'] or len(data['teams'][team_name]['members']) < 2:
        update.callback_query.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    assignment = secret_santa(data['teams'][team_name]['members'])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    for giver in assignment:
        receiver = assignment[giver]
        wishes = data['users'][str(receiver)]['wishes']
        username = data['users'][str(receiver)]['username']
        
        context.bot.send_message(
            chat_id=giver,
            text=f"–¢—ã –¥–∞—Ä–∏—à—å –ø–æ–¥–∞—Ä–æ–∫ {username} \n–ü—Ä–æ —Å–µ–±—è –æ–Ω –Ω–∞–ø–∏—Å–∞–ª —Ç–∞–∫: {wishes}"
        )

    context.bot.send_message(
        chat_id=user_id,
        text="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∑–Ω–∞–µ—Ç, –∫–æ–º—É –æ–Ω –¥–∞—Ä–∏—Ç –ø–æ–¥–∞—Ä–æ–∫.\n"
             "–ö–æ–≥–¥–∞ —Å–¥–µ–ª–∞–µ—à—å –ø–æ–¥–∞—Ä–æ–∫, –Ω–∞–ø–∏—à–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ '–ì–û–¢–û–í–û'."
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ù–ì
    context.bot.send_message(chat_id=user_id, text="–° –ù–æ–≤—ã–º –ì–æ–¥–æ–º! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. üéâ")

# –§—É–Ω–∫—Ü–∏—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
def secret_santa(members):
    shuffled = members[:]
    random.shuffle(shuffled)
    return {members[i]: shuffled[i] for i in range(len(members))}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    TOKEN = '7449709461:AAE1M2zp-Z_E6a_5yetifIzPqCH_E-Lb7tE'

    updater = Updater(token=TOKEN, use_context=True)

    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(team_selection))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, write_wishes))
    dispatcher.add_handler(CallbackQueryHandler(show_action_buttons))
   # dispatcher.add_handler(CallbackQueryHandler(price_selection, pattern='^price_.*$'))
    dispatcher.add_handler(CallbackQueryHandler(distribute, pattern='^distribute$'))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()