import json
import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
def load_data(filename):
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    else:
        return {"users": {}, "teams": {}}  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–º–∞–Ω–¥

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
def save_data(filename, data):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def update_user_data(user_id, username, team, wishes, receiver,filename='bazadannih.json'):
    data = load_data(filename)
    if str(user_id) not in data['users']:
        data['users'][str(user_id)] = {
            'username': username,
            'team': team,
            'wishes': wishes,
            'receiver': receiver
        }
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data['users'][str(user_id)]['username'] = username
        data['users'][str(user_id)]['team'] = team
        data['users'][str(user_id)]['wishes'] = wishes
        data['users'][str(user_id)]['receiver'] = receiver
        
    save_data(filename, data)


# –ù–∞—á–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    context.user_data['username'] = username

    update_user_data(user_id, username, team='–ù–µ —É–∫–∞–∑–∞–Ω–∞', wishes='–ù–µ —É–∫–∞–∑–∞–Ω—ã', receiver='–Ω–µ —É–∫–∞–∑–∞–Ω—ã')

    update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –î–æ—Ä–æ–≥–æ–π –°–∞–Ω—Ç–∞, {username}! üéÖ\n"
                              "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ - –í–µ–ª—å—Ñ. –ú–æ—è –∑–∞–¥–∞—á–∞ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –°–∞–Ω—Ç—É, –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã –±—É–¥–µ—à—å –¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫.")

    # –ö–Ω–æ–ø–æ—á–∫–∏
    keyboard = [
        [InlineKeyboardButton("–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞", callback_data='join_team')],
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É", callback_data='create_team')],
        [InlineKeyboardButton("–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data='how_it_works')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é?", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
def team_selection(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()

    if query.data == "join_team":
        query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.")
        context.user_data['action'] = 'join_team'
    elif query.data == "create_team":
        query.message.reply_text("–ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã.")
        context.user_data['action'] = 'create_team'
    elif query.data == "how_it_works":
        query.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–µ –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞."
                                  "–¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π."
                                  "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è. –ê –∫–æ–≥–¥–∞ –≤—Å—è –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –≤ —Å–±–æ—Ä–µ, –ì–ª–∞–≤–Ω—ã–π –°–∞–Ω—Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")


# –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ
def join_team(update: Update, context: CallbackContext, team_name: str = None) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    team_name = update.message.text.strip() if team_name is None else team_name

    data = load_data('bazadannih.json')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ
    if str(user_id) in data['users'] and data['users'][str(user_id)]['team'] != '–ù–µ —É–∫–∞–∑–∞–Ω–∞':
        update.message.reply_text("–¢—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–æ–º–∞–Ω–¥–µ –∏ –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–æ–π.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞
    if team_name in data['teams']:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É
        context.user_data['team'] = team_name
        data['teams'][team_name]['members'].append(user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_user_data(user_id, username, team=team_name, wishes='–ù–µ —É–∫–∞–∑–∞–Ω—ã', receiver='–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω', filename='bazadannih.json')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        save_data('bazadannih.json', data)

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏—è
        context.user_data['action'] = 'write_wishes'
        update.message.reply_text("–¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.")

    else:
        update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
def create_team(update: Update, context: CallbackContext, team_name: str) -> None:                 
    user_id = update.message.from_user.id
    team_name = update.message.text.strip()
    data = load_data('bazadannih.json')

    if team_name in data['teams']:
        update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
    data['teams'][team_name] = {
        'categories': [],
        'members': [user_id],
        'creator': user_id
    }
    save_data('bazadannih.json', data)
    
    update_user_data(user_id, context.user_data['username'], team=team_name, wishes='–ù–µ —É–∫–∞–∑–∞–Ω—ã', receiver='–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')        
    
    update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞.")
    context.user_data['team'] = team_name
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π
    context.user_data['action'] = 'write_wishes'

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏—è
    update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def write_wishes(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    user_action = context.user_data.get('action')  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = load_data('bazadannih.json')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è team_name
    team_name = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ
    if str(user_id) in data['users'] and data['users'][str(user_id)]['team'] != '–ù–µ —É–∫–∞–∑–∞–Ω–∞':
        team_name = data['users'][str(user_id)]['team']  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –ë–î

    if user_action == 'create_team':  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—ë—Ç –∫–æ–º–∞–Ω–¥—É
        team_name = update.message.text.strip()
        create_team(update, context, team_name)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    elif user_action == 'join_team' and (team_name == '–ù–µ —É–∫–∞–∑–∞–Ω–∞' or not team_name):  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ –∏ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –Ω–µ–π
        team_name = update.message.text.strip()
        join_team(update, context, team_name)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ
    elif user_action == 'write_wishes' or (team_name and team_name != '–ù–µ —É–∫–∞–∑–∞–Ω–∞'):  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ
        wishes = update.message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–æ–∂–µ–ª–∞–Ω–∏–π
        if len(wishes) < 10:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏—è –≤ –ë–î
        data['users'][str(user_id)]['wishes'] = wishes
        save_data('bazadannih.json', data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
        update.message.reply_text("–¢–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –ø–æ–¥–æ–∂–¥–∏, –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å—Ç–∏—Ç —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–æ–º–∞–Ω–¥—ã
        creator_id = data['teams'][team_name]['creator']
        if creator_id == user_id:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–º—É –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
            show_action_buttons(update, context)
        else:
            context.bot.send_message(
                chat_id=creator_id,
                text="–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è! –ê —Ç–µ–ø–µ—Ä—å –ø–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ –ì–ª–∞–≤–Ω—ã–π –°–∞–Ω—Ç–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤", callback_data='distribute')]])
            )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π
        context.user_data['action'] = None
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π –µ—ë.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
def show_action_buttons(update: Update, context: CallbackContext):
    if update.message:
        chat_id = update.message.chat_id
    elif update.callback_query:
        chat_id = update.callback_query.message.chat_id

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤
    keyboard = [[InlineKeyboardButton("‚ùÑÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤ ‚ùÑÔ∏è", callback_data='distribute')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(chat_id=chat_id, text=" ‚ùÑÔ∏è–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞?‚ùÑÔ∏è", reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤
def distribute(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    data = load_data('bazadannih.json')

    user_id = query.from_user.id
    team_name = data['users'][str(user_id)]['team']

    if not team_name or team_name == '–ù–µ —É–∫–∞–∑–∞–Ω–∞':
        query.message.reply_text("–¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–æ–º–∞–Ω–¥–µ.")
        return

    team = data['teams'][team_name]
    members = team['members']

    if len(members) < 2:
        query.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã.")
        return

    # –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    shuffled_members = members[:]
    random.shuffle(shuffled_members)

    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for i in range(len(shuffled_members)):
        giver = shuffled_members[i]
        receiver = shuffled_members[(i + 1) % len(shuffled_members)]

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ –ë–î
        data['users'][str(giver)]['receiver'] = data['users'][str(receiver)]['username']

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
        context.bot.send_message(giver, f"–¢—ã –±—É–¥–µ—à—å –¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ {data['users'][str(receiver)]['username']}!")
        context.bot.send_message(giver, f"–ü–æ–∂–µ–ª–∞–Ω–∏—è: {data['users'][str(receiver)]['wishes']}")

    save_data('bazadannih.json', data)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥—ã
    query.message.reply_text("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    query.message.reply_text(f"–ù–µ –∑–∞–±—É–¥—å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –≤–æ–≤—Ä–µ–º—è, –∞ —Ç–æ {data['users'][str(receiver)]['username']} –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –±–µ–∑ –Ω–µ–≥–æ!")
    query.message.reply_text("–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º!")


# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è distribute
def distribute_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    distribute(update, context)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    TOKEN = '7449709461:AAE1M2zp-Z_E6a_5yetifIzPqCH_E-Lb7tE'

    updater = Updater(token=TOKEN, use_context=True)

    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(team_selection, pattern="^(join_team|create_team|how_it_works)$"))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, write_wishes))

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤
    dispatcher.add_handler(CallbackQueryHandler(distribute_callback, pattern='^distribute$'))

def show_action_buttons(update: Update, context: CallbackContext) -> None:
    if update.message:
        chat_id = update.message.chat_id
    elif update.callback_query:
        chat_id = update.callback_query.message.chat_id

    keyboard = [
        [InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É Secret Santa", callback_data='rate_secret_santa')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞–±–æ—Ç—ã Secret –ùSanta
def rate_secret_santa(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É Secret Santa, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10.")

def handle_rating(update: Update, context: CallbackContext) -> None:
    rating = update.message.text.strip()
    if rating.isdigit() and 1 <= int(rating) <= 10:
        update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É: {rating}!")
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—Ü–µ–Ω–∫—É –∑–¥–µ—Å—å
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 –¥–ª—è –æ—Ü–µ–Ω–∫–∏.")

def main() -> None:
    TOKEN = '7449709461:AAE1M2zp-Z_E6a_5yetifIzPqCH_E-Lb7tE'
    updater = Updater(token=TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(team_selection, pattern="^(join_team|create_team|how_it_works)$"))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, write_wishes))
    dispatcher.add_handler(CallbackQueryHandler(distribute_callback, pattern='^distribute$'))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞–±–æ—Ç—ã Secret Santa
    dispatcher.add_handler(CallbackQueryHandler(rate_secret_santa, pattern='^rate_secret_santa$'))
    dispatcher.add_handler(MessageHandler(Filters.text & Filters.reply, handle_rating))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()

    

